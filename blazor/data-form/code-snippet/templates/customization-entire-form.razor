@using Syncfusion.Blazor
@using Syncfusion.Blazor.DataForm
@using Syncfusion.Blazor.Buttons
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.DropDowns
<div class="col-lg-12 control-section">
    <div class="control-wrapper">
        <SfStepper Linear=true ID="stepperValidation" @ref="validationStepper" StepChanging="handleStepChange">
            <StepperSteps>
                <StepperStep IconCss="sf-icon-shopping-cart_01-" Text="Product Details"></StepperStep>
                <StepperStep @ref="stepperStep" IconCss="sf-icon-check" Text="Billing Details"></StepperStep>
            </StepperSteps>
        </SfStepper>
        <div class="form-section">
            <SfDataForm ID="MyForm"
                        Model="ProductDetailsModel"
                        OnValidSubmit="ValidSubmitHandler" OnInvalidSubmit="InValidSubmithandler" ButtonsAlignment="FormButtonsAlignment.Center">
                <FormValidator>
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary />
                </FormValidator>
                <FormTemplate>
                    <div class="product-details" style="display: @ProductContainerDisplay">
                        <h5 class="control-header">Product Info</h5>
                        <div class="form-group">
                            <label class="e-form-label">Category</label>
                            <SfTextBox @bind-Value="ProductDetailsModel.Category" Readonly="true" />
                        </div>
                        <div class="form-group">
                            <label class="e-form-label">Brand</label>
                            <SfDropDownList TValue="string" TItem="string" DataSource="BrandData" @bind-Value="ProductDetailsModel.Brand">
                            </SfDropDownList>
                        </div>
                        <div class="form-group">
                            <label class="e-form-label">Color</label>
                            <SfDropDownList TValue="string" TItem="string" DataSource="Colors" @bind-Value="ProductDetailsModel.Color"></SfDropDownList>
                        </div>
                        <div class="form-group">
                            <label class="e-form-label">Size</label>
                            <SfDropDownList TValue="string" TItem="string" DataSource="SizeData" @bind-Value="ProductDetailsModel.Size"></SfDropDownList>
                        </div>
                    </div>
                    <div class="payment-info" style="display: @BillingContainerDisplay">
                        <h5 class="control-header">Payment Details</h5>
                        <div class="form-group">
                            <label class="e-form-label">Contact Number</label>
                            <SfMaskedTextBox Mask="+(00) 0000000000" Placeholder="eg. +12 1234567890" @bind-Value="ProductDetailsModel.ContactNumber" />
                        </div>
                        <div class="form-group">
                            <label class="e-form-label">Shipping Address</label>
                            <SfTextBox Multiline="true" @bind-Value="ProductDetailsModel.ShippingAddress" />
                        </div>
                        <div class="form-group">
                            <label class="e-form-label">Delivery Instructions (Optional)</label>
                            <SfTextBox Multiline="true" @bind-Value="ProductDetailsModel.DeliveryInstructions" Placeholder="Landmark , alternate contact number etc.. " />
                        </div>
                    </div>
                </FormTemplate>
                <FormButtons>
                    <SfButton>Buy now</SfButton>
                </FormButtons>
            </SfDataForm>
        </div>
    </div>
</div>

@code {
    private SfStepper validationStepper;
    private StepperStep stepperStep;
    public string ProductContainerDisplay { get; set; } = "block";
    public string BillingContainerDisplay { get; set; } = "none";
    public string[] BrandData = new string[] { "Adidas", "Puma", "Reebok", "Nike", "Skechers", "Vans" };
    public string[] Colors = new string[] { "Black", "Grey", "White", "Red", "Beige", "Pink", "Off-White" };
    public string[] SizeData = new string[] { "6UK", "7UK", "8UK", "9UK", "10UK", "11UK" };
    public void InValidSubmithandler()
    {
        stepperStep.IsValid = false;
    }
    public void ValidSubmitHandler()
    {
        stepperStep.IsValid = true;
    }
    private void handleStepChange(StepperChangedEventArgs args)
    {
        if (args.ActiveStep == 0)
        {
            ProductContainerDisplay = "block";
            BillingContainerDisplay = "none";
        }
        else
        {
            ProductContainerDisplay = "none";
            BillingContainerDisplay = "block";
        }
    }
    private ProductDetails ProductDetailsModel = new ProductDetails()
        {
            Category = "Shoes - Men",
            Color = "Black",
            Size = "6UK"
        };
}